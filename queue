#include <stdio.h>
#include <malloc.h>
//单链表节点
struct node
{
	int val;
	struct node *next;
};
//表头
static struct node *phead = NULL;
//创建节点
static struct node *creat_node(int val)
{
	struct node *pnode = NULL;
	pnode = (struct node*)malloc(sizeof(struct node));
	if(!pnode)
		return NULL;
	pnode -> val = val;
	pnode -> next = NULL;

	return pnode;
}
//销毁单链表
static int destroy_single_link(){
	struct node *pnode = NULL;
	while(phead != NULL)
	{
		pnode = phead;
		phead = phead -> next;
		free(pnode);
	}
	return 0;
}

//从队尾添加节点
static void add(int val)
{
	if(!phead)
	{
		phead = creat_node(val);
		return ;
	}
	struct node *pnode = creat_node(val);
	struct node *pend = phead;
	while(pend -> next)
	{
		pend = pend->next;
	}
	pend -> next = pnode;
}
//返回队头元素
int front()
{
	return phead -> val;
}
//返回并删除队头元素
static int pop()
{
	int ret = phead->val;
	struct node *pnode = phead;
	phead = phead->next;
	free(pnode);

	return ret;
} 
//返回链表节点个数
static int size()
{
	int count = 0;
	struct node *pend = phead;
	while(pend)
	{
		pend = pend->next;
		count++;
	}
	return count;
}
//链表是否为空
static int is_empty()
{
	return size() == 0;
}
int main(){

    int tmp = 0;
    add(10);
    add(20);
    add(30);
    //输出队头元素
    tmp = front();
    printf("队头元素：%d\n", tmp);
    //输出队头元素，并删除该节点
    tmp = pop();
    printf("队头元素：%d\n", tmp);

    add(40);
    printf("is_empty()=%d\n", is_empty());
    //输出队列的大小
    printf("size()=%d\n", size());
    //元素出队
    while(!is_empty()){
    	printf("%d\n", pop());
    }
    //销毁队列
    destroy_single_link();
    return 0;
}
